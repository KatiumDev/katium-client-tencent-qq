syntax = "proto3";

option java_package = "katium.client.qq.network.pb";
option java_outer_classname = "PbMessages";

import "message_elements.proto";

message PullMessagesRequest {
  optional SyncFlag syncFlag = 1;
  optional bytes syncCookie = 2;
  optional int32 rambleFlag = 3;
  optional int32 latestRambleNumber = 4;
  optional int32 otherRambleNumber = 5;
  optional int32 onlineSyncFlag = 6;
  optional int32 contextFlag = 7;
  optional int32 whisperSessionId = 8;
  optional int32 requestType = 9;
  optional bytes publicAccountCookie = 10;
  optional bytes messageControlBuffer = 11;
  optional bytes serverBuffer = 12;
}

message PullMessagesResponse {
  int32 result = 1;
  optional string errorMessage = 2;
  optional bytes syncCookie = 3;
  SyncFlag syncFlag = 4;
  repeated UinPairMessage messages = 5;
  optional int64 uin = 6;
  int32 syncType = 7;
  optional bytes publicAccountCookie = 8;
  optional bool isPartialSync = 9;
  optional bytes controlBuffer = 10;
}

message OnlinePushRequest {
  Message message = 1;
  optional int32 serverIP = 2;
  optional bytes pushToken = 3;
  optional int32 pingFlag = 4;
  optional int32 generateFlag = 9;
}

enum SyncFlag {
  START = 0;
  CONTINUE = 1;
  STOP = 2;
}

message SyncCookie {
  optional int64 time1 = 1;
  optional int64 time = 2;
  optional int64 ran1 = 3;
  optional int64 ran2 = 4;
  optional int64 const1 = 5;
  optional int64 const2 = 11;
  optional int64 const3 = 12;
  optional int64 lastSyncTime = 13;
  optional int64 const4 = 14;
}

message UinPairMessage {
  int32 lastReadTime = 1;
  optional int64 peerUin = 2;
  optional int32 completed = 3;
  repeated Message messages = 4;
}

message Message {
  MessageHeader header = 1;
  optional ContentHead content = 2;
  MessageBody body = 3;
}

message MessageHeader {
  int64 fromUin = 1;
  int64 toUin = 2;
  int32 type = 3;
  optional int32 c2cCmd = 4;
  int32 sequence = 5;
  int32 time = 6;
  int64 uid = 7;
  optional C2CTempMessageHeader c2cHeader = 8;
  optional GroupInfo groupInfo = 9;
  optional int32 fromAppID = 10;
  optional int32 fromInstID = 11;
  optional int32 userActive = 12;
  optional DiscussionInfo discussionInfo = 13;
  optional string fromNick = 14;
  optional int64 authUin = 15;
  optional string authNick = 16;
  optional int32 flag = 17;
  optional string authRemark = 18;
  optional string groupName = 19;
  optional MultiTransHeader multiTransHeader = 20;
  optional InstControl instControl = 21;
  optional int32 publicAccountGroupSendFlag = 22;
  optional int32 wseqInC2cMsghead = 23;
  optional int64 cpid = 24;
  optional ExtensionGroupKeyInfo extGroupKeyInfo = 25;
  optional string multiCompatibleText = 26;
  optional int32 authSex = 27;
  optional bool isSourceMessage = 28;
}

message GroupInfo {
  optional int64 groupCode = 1;
  optional int32 groupType = 2;
  optional int64 groupInfoSeq = 3;
  optional string groupCard = 4;
  optional bytes groupRank = 5;
  optional int32 groupLevel = 6;
  optional int32 groupCardType = 7;
  optional bytes groupName = 8;
}

message DiscussionInfo {
  optional int64 uin = 1;
  optional int32 type = 2;
  optional int64 infoSequence = 3;
  optional bytes remark = 4;
  optional bytes name = 5;
}

message MultiTransHeader {
  optional int32 status = 1;
  optional int32 messageID = 2;
}

message C2CTempMessageHeader {
  optional int32 c2cType = 1;
  optional int32 serviceType = 2;
  optional int64 groupUin = 3;
  optional int64 groupCode = 4;
  optional bytes sig = 5;
  optional int32 sigType = 6;
  optional string fromPhone = 7;
  optional string toPhone = 8;
  optional int32 lockDisplay = 9;
  optional int32 directionFlag = 10;
  optional bytes reserved = 11;
}

message InstControl {
  repeated InstInfo toInst = 1;
  repeated InstInfo excludeInst = 2;
  optional InstInfo fromInst = 3;
}

message InstInfo {
  optional int32 appID = 1;
  optional int32 instID = 2;
  optional int32 platform = 3;
  optional int32 deviceType = 10;
}

message ExtensionGroupKeyInfo {
  optional int32 maxSequence = 1;
  optional int64 time = 2;
}

message ContentHead {
  optional int32 packageNumber = 1;
  optional int32 packageIndex = 2;
  optional int32 divideSequence = 3;
  optional int32 autoReply = 4;
}

message MessageBody {
  RichText richText = 1;
  optional bytes content = 2;
  optional bytes encryptContent = 3;
}

message RichText {
  optional Attributes attributes = 1;
  repeated Element elements = 2;
  optional NotOnlineFile notOnlineFile = 3;
  optional Ptt ptt = 4;
}

message Attributes {
  optional int32 codePage = 1;
  optional int32 time = 2;
  optional int32 random = 3;
  optional int32 color = 4;
  optional int32 size = 5;
  optional int32 effect = 6;
  optional int32 charSet = 7;
  optional int32 pitchAndFamily = 8;
  optional string fontName = 9;
  optional bytes reserveData = 10;
}

message Element {
  optional PlainText plainText = 1;
  /*optional Face face = 2;
  optional OnlineImage onlineImage = 3;
  optional NotOnlineImage notOnlineImage = 4;
  optional TransElem transElemInfo = 5;
  optional MarketFace marketFace = 6;
  //ElemFlags elemFlags = 7;
  optional CustomFace customFace = 8;
  optional ElemFlags2 elemFlags2 = 9;
  //FunFace funFace = 10;
  //SecretFileMsg secretFile = 11;
  optional RichMsg richMsg = 12;
  optional GroupFile groupFile = 13;
  //PubGroup pubGroup = 14;
  //MarketTrans marketTrans = 15;
  optional ExtraInfo extraInfo = 16;
  //ShakeWindow? shakeWindow = 17;
  //PubAccount? pubAccount = 18;
  optional VideoFile videoFile = 19;
  //TipsInfo? tipsInfo = 20;*/
  optional AnonymousGroupMessage anonymousInfo = 21;
  /*//QQLiveOld? qqLiveOld = 22;
  //LifeOnlineAccount? lifeOnline = 23;
  optional QQWalletMsg QQWalletMsg = 24;
  //CrmElem? crmElem = 25;
  //ConferenceTipsInfo? conferenceTipsInfo = 26;
  //RedBagInfo? redbagInfo = 27;
  //LowVersionTips? lowVersionTips = 28;
  //bytes bankcodeCtrlInfo = 29;
  //NearByMessageType? nearByMsg = 30;
  optional CustomElem customElem = 31;
  //LocationInfo? locationInfo = 32;
  //PubAccInfo? pubAccInfo = 33;
  //SmallEmoji? smallEmoji = 34;
  //FSJMessageElem? fsjMsgElem = 35;
  //ArkAppElem? arkApp = 36;
  optional GeneralFlags generalFlags = 37;
  //CustomFace? hcFlashPic = 38;
  //DeliverGiftMsg? deliverGiftMsg = 39;
  //BitAppMsg? bitappMsg = 40;
  //OpenQQData? openQqData = 41;
  //ApolloActMsg? apolloMsg = 42;
  //GroupPubAccountInfo? groupPubAccInfo = 43;
  //BlessingMessage? blessMsg = 44;
  optional SourceMsg srcMsg = 45;
  //LolaMsg? lolaMsg = 46;
  //GroupBusinessMsg? groupBusinessMsg = 47;
  //WorkflowNotifyMsg? msgWorkflowNotify = 48;
  //PatsElem? patElem = 49;
  //GroupPostElem? groupPostElem = 50;
  optional LightAppElem lightApp = 51;
  //EIMInfo? eimInfo = 52;
  optional CommonElem commonElem = 53;*/
}

message NotOnlineFile {
  optional int32 fileType = 1;
  optional bytes sig = 2;
  optional bytes fileUuid = 3;
  optional bytes fileMd5 = 4;
  optional bytes fileName = 5;
  optional int64 fileSize = 6;
  optional bytes note = 7;

  optional int32 reserved = 8;
  optional int32 subcmd = 9;
  optional int32 microCloud = 10;
  repeated bytes bytesFileUrls = 11;
  optional int32 downloadFlag = 12;
  optional int32 dangerEvel = 50;
  optional int32 lifeTime = 51;
  optional int32 uploadTime = 52;
  optional int32 absFileType = 53;
  optional int32 clientType = 54;
  optional int32 expireTime = 55;
  optional bytes pbReserve = 56;
}

message Ptt {
  optional int32 fileType = 1;
  optional int64 sourceUin = 2;
  optional bytes fileUuid = 3;
  optional bytes fileMd5 = 4;
  optional string fileName = 5;
  optional int32 fileSize = 6;
  optional bytes reserve = 7;
  optional int32 fileId = 8;
  optional int32 serverIp = 9;
  optional int32 serverPort = 10;
  optional bool boolValid = 11;
  optional bytes signature = 12;
  optional bytes shortcut = 13;
  optional bytes fileKey = 14;
  optional int32 magicPttIndex = 15;
  optional int32 voiceSwitch = 16;
  optional bytes pttUrl = 17;
  optional bytes groupFileKey = 18;
  optional int32 time = 19;
  optional bytes downPara = 20;
  optional int32 format = 29;
  optional bytes pbReserve = 30;
  repeated bytes bytesPttUrls = 31;
  optional int32 downloadFlag = 32;
}
